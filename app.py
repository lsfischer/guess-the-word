import regex
import random
import numpy as np
import pandas as pd
from generator import generate_sentence
from word_predictor import get_top_k_predictions


def get_random_sentence() -> str:
    """Get a random sentence from the dataset of sentences"""

    df = pd.read_csv("./assets/sentences.csv", index_col=0)
    return df["sentence"].sample(1).item()


def mask_random_word(input_sentence: str, generated_sentence: str) -> str:
    """
    Mask one of the words in the generated part of the sentence

    Params
    ------
        input_sentence: The original sentence
        generated_sentence: The original sentence plus the part that was generated by GPT-2

    Returns
    -------
        A new sentence, the same as generated_sentence but with one of the words replaced with [MASK] to be sent to BERT
    """
    generated_part = generated_sentence[len(input_sentence) :]

    words = regex.findall("(\w+)", generated_part)
    words_indexed = list(enumerate(words))
    mask_index = random.choice(words_indexed)[0]

    words[mask_index] = "[MASK]"
    return input_sentence + "." + " ".join(words)


if __name__ == "__main__":
    input_sentence = input(
        "Enter an initial sentence or press enter for a random one\n"
    )

    input_sentence = input_sentence if input_sentence != "" else get_random_sentence()
    generated_sentence = generate_sentence(input_sentence)
    masked_sentence = mask_random_word(input_sentence, generated_sentence)
    print(f"Sentence: {masked_sentence}")
    predictions = get_top_k_predictions(masked_sentence, 5)

    winner = predictions[0]
    guess = input(
        f"Guess what BERT thinks is the masked word, possibilities: {np.random.permutation(predictions)}\n"
    )
    if guess == winner:
        print("correct!")
    else:
        print(f"not quite, it was '{winner}'")
